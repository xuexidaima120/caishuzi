//int Add(int x, int y)
//{
//	int z = 0;
//	z = x + y;
//	return z;
//}
//int main()
//{
//	int a = 10;
//	int b = 20;
//	int sum = Add(a, b);
//	printf("%d\n", sum);
//	return 0;
//}
//比较两个最大值
//int get_max(int x, int y)
//{
//	if (x > y)
//		return x;
//	else
//		return y;
//}
//int main()
//{
//	int a = 10;
//	int b = 20;
//	int max = get_max(a, b);
//	printf("max=%d\n", max);
//	return 0;
//}
//void Swap(int* pa, int* pb)//指针p
//{
//	//交换两个整形变量的内容
//	int tmp = 0;
//	tmp = *pa;
//	*pa = *pb;
//	*pb= tmp;
//}
//int main()
//{
//	int a = 10;
//	int b = 20;//a,b形式参数
//	printf("a=%d b=%d\n", a, b);
//	Swap(&a, &b);//实际参数
//	printf("a=%d b=%d\n", a, b);
//	return 0;
//	//形参实例化之后其实相当于实例的一份临时拷贝
//}
////是素数返回1，不是素数返回0
//int is_prime(int n)
//{
//	//2->n_1
//	int j = 0;
//	for (j = 2; j < n; j++)
//	{
//		if (n%j == 0)
//			return 0;
//		else
//			return 1;
//	}
//	
//}
//
//int main()
//{
//	//打印100-200之间的素数
//	int i = 0;
//	int count = 0;
//	for (i = 100; i <= 200; i++)
//	{
//		//判断i是否为素数
//		if (is_prime(i) == 1)
//		{
//			printf("%d ", i);
//			count++;
//		}
//	}
//	printf("\ncount=%d\n", count);//数出有多少个素数
//	return 0;
//}

//判断闰年
//int is_leap_year(int y)
//{
//	if ((y % 4 == 0 && y % 100 != 0) || (y % 400 == 0))
//		return 1;
//	else
//		return 0;
//}
//int main()
//{
//	int year = 0;
//	int count = 0;
//	for (year = 1000; year <= 2000; year++)
//	{
//		if (1 == is_leap_year(year))
//		{
//			printf("%d ", year);
//			count++;
//		}
//	}
//	printf("\ncount=%d\n", count);
//	return 0;


int binary_search(int arr[], int k,int sz)
{
	int left = 0;
	int right = sz - 1;
	while (left <= right) 
	{
	int mid = (left + right) / 2;//中间元素的下标
	if (arr[mid] < k)
	{
		left = mid + 1;
	} 
	else if(arr[mid]>k)
	{
		right = mid - 1;
	}
	else {
		return mid;
	}
	}
	return -1;
}
int main()
{
	//二分查找
	//在一个有序数组中查找具体的某个数
	//如果找到了返回，这个数的下标，找不到的返回-1
	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
	int k = 7;
	int sz = sizeof(arr) / sizeof(arr[0]);//计算元素的个数
	int ret = binary_search(arr, k,sz);
	if (ret == -1)
	{
		printf("找不到指定的数字\n");
	}
	else
	{
		printf("找到了，下标%d\n", ret);
	}
	return 0;
}
